提纲:1.正则表达式
        2.异常
        3.自定义异常
        4.内部类
--------------------------------------------------------------------------------------
知识点1:正则表达式
  
    在JDK1.4以后,Java对正则表达式完全支持

    API:java.util.regex
    
    类:Pattern
                   常用方法:
                       //1.将给定的正则表达式编译到模式中
                      public static Pattern compile(String regex);
                      //2.通过模板获取匹配器
                      public Matcher macher(CharSequence input)
                      3.public static boolean matches("正则表示式","匹配的内容");
    类:Matcher
                    public boolean find();
                    //尝试与目标准则进行匹配
                    
                    public int start();
                    //返回匹配成功的字符序列在整个序列中的起始位置

                    public int end();
                    //返回匹配成功的字符序列在整个序列中的结束位置

                    public String group();
                    //返回匹配成功的字符序列
常用的正则表达式语法规则:详细参见:java.util.regex.Pattern

. 任何字符（与行结束符可能匹配也可能不匹配） 
\d 数字：[0-9] 
\D 非数字： [^0-9] 
\s 空白字符：[ \t\n\x0B\f\r] 
\S 非空白字符：[^\s] 
\w 单词字符：[a-zA-Z_0-9] 
\W 非单词字符：[^\w] 

X?    X，一次或一次也没有 
X*    X，零次或多次 
X+   X，一次或多次 
X{n}  X，恰好 n 次 
X{n,}   X，至少 n 次 
X{n,m}  X，至少 n 次，但是不超过 m 次 
---------------------------------------------------------------------------------------------------------------
异常处理机制:
          异常也是对象,既然是对象,那么它也有数据类型
          异常的顶级数据类型是java.lang.Throwable

         JVM根据异常的严重程度,分为两大类
         一类是错误(Error):一般是比较严重的问题,不建议去处理
                       比如:StackOverflowError:堆栈溢出
                               OutOfMemoryError:内存溢出
         一类叫做异常(Exception):是指程序在运行的过程当中出现的不正常情况
                                                有些是可以恢复的,有些是不可以恢复的!
      
           异常本身自己又分为两大类:
                        A.一种是运行时异常:也称为未检测异常,这部分异常都是属于
                                     RuntimeException的子类,一般它是不需要程序员去处理的,只需要程序员编码谨慎点
                        比如:NullPointerException  空指针异常
                                InputMismatchException:  输入不匹配异常
                                ArraysIndexOutOfBoundsException  数组下标越界异常
                               ClassCastException   类型转换异常
                               StringIndexOutOfBoundsException   字符串下标越界异常
                               IllegalArgumentException  非法参数异常
                              .......
                      B.另一种是非运行时异常:也称为已检测异常,这部分异常都是属于Exception的子类
                                                             要求程序员去处理的,处理方式又分为积极处理和消极处理
                          比如:InterruptedException  中断异常
                                  ParseException         解析异常
                                  IOException             IO流异常
                                  SqlException           数据库操作异常
                                  FileNotFoundException   文件不存在异常

                         注意:所有的运行时异常都是非运行时异常的子类
                         ......
异常处理方式又分为两种:
              1.积极处理:
                      a.推荐使用的,因为它能够针对不同的异常作出不同的处理
                      try{
                                  //可能出现异常的语句1
                                  //可能出现异常的语句2
                                  //可能出现异常的语句3
                                  return;
                         }catch(异常类型1 变量名1){
                                //异常处理1
                         }catch(异常类型2 变量名2){
                                //异常处理2 
                         }catch(异常类型3 变量名3){
                                //异常处理3
                         }finally{
                                  //不管出不出现异常,都会去执行此处代码     除非出现System.exit(0)  虚拟机进程中断     
                                  //比如  连接池的关闭  IO关闭.....
                         }
注意点:catch块中的异常如果存在父子类的关系,那么我们一定要把子类放在前面,父类尽量往后          
                 
                 b.JDK7.0的新特性
                    try{
                          //可能出现异常的地方
                    }catch(异常类型1 | 异常类型2 | 异常类型3 变量名){
                        //处理
                    }
                 
                c.不推荐使用
                    try{
                          //可能出现异常的地方
                    }catch(异常的总父类 变量名){
                        //处理
                    }
------------------------------------------------------------------------------------------------------------------
消极处理:
              在方法上   throws 异常类型
              在方法体中　throw 异常对象

异常处理方式的选择:
        如果B中会出现异常,而方法A中调用B,并且A中也会出现相同的异常
        那么我们选择在B中消极处理,然后由A统一去抓
------------------------------------------------------------------------------------------------------
程序员  自定义异常   extends Exception
-----------------------------------------------------------------------------------------------------
内部类:
          定义:定义在其他类内部的类
分为四种:
              1.成员内部类(Member Inner class)
              2.静态内部类(Static Inner class)
              3.局部内部类(Local Inner class)
              4.匿名内部类

              1.成员内部类:内部类以外部类的一个成员的方式存在着
                          特点:1.内部类可以访问到外部类的所有的成员
                                  2.如果内部类的属性名和外部类的属性名相同的话
                                    我们可以通过如下方式来访问外部类的属性:
                                    Outer.this.属性名
                                  3.如果内部类是公开的,那么我们在另一个类中可以通过
                                     如下方式来创建内部类对象
                                     外部类.内部类 变量名 = 外部类对象.new 内部类对象.
                                  4.如果内部类是私有的,那么必须要提供一个创建内部类的方法供外面调用!
             2.静态内部类:.....静态成员.....
                        特点:1.可以访问到外部类的所有静态成员
                                2.在另一类当中创建静态内部类的对象
                                内部类名 变量名 = new 外部类名.内部类名();
                                3.如果静态内部类是公开的,那么它可以上升成为"顶级类"
                                内部类名 变量名 = new 内部类名();
            3.局部内部类(Local Inner class):把内部类定义在外部内的成员方法中
                       特点:1.可以访问到外部类的所有的成员
                               2.可以访问所在方法中的final修饰的成员
                               3.这个类只能在它所定义的方法中使用
             4.匿名内部类(Anonymous Inner class):
                           同上  它没有名字

















