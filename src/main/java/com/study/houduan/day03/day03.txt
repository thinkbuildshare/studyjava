提纲:
        1.Java当中如何产生随机数
        2.Java当中给我们提供的数学工具类Java.lang.Math
        3.Java当中如何格式化输出
        4.方法的设计与调用
        5.条件判断   if   else 和 switch语句   三目运算
        6.循环语句    for循环   while循环   do while
        7.break    continue
------------------------------------------------------------------------------------------------------
知识点1:伪随机
            Java给我们提供了两种生成随机数的方式
          
           //1.通过Math.random()方法       
            //此方法是静态的,所以可以直接类名.方法名
            //方法的返回类型是double
            //范围[0.0,1.0)
            double r = Math.random();//返回了一个大于等于0.0小于1.0之间的伪随机数
             案例1:如何产生1-100之间的随机数?
            int r =(int)(Math.random()*100+1);//需要强转

         第二种方法:java.util.Random()类
              //因为nextInt(int n)方法是非静态的,所以我们必须要通过对象名.方法名来调用
              //所以我们必须要先创建对象
              //返回类型是int 类型
              //范围是[0,n)

              1.先创建Random()对象
              Random r = new Random();//r就是对象或者说r是一个引用
              int n = nextInt(100)+1;//产生了一个[1-100]
-------------------------------------------------------------------------------------------------------------------
知识点二:
          Java中给我们提供了关于数学的工具类,进行  指数运算  求根
              次幂     求最值   
         注意点:Math的方法都是静态方法,所以可以直接Math.方法名()来进行调用
------------------------------------------------------------------------------------------------------------------------
知识点三:
              Java中的格式化输出

              语法:%[flag][width][.precision]占位符

              flag:标记位    -表示左对齐   默认的是右对齐
              width:变量所占的宽度
              precision:精度
占位符有哪些?
  %s   代表字符串(所有的类型都可以被字符串代替,但是字符串不能够随意转成其他类型)
  %d   代表一个整数
  %f    代表一个小数
  %b   代表布尔类型
-----------------------------------------------------------------------------------------------------
 知识点四:方法的设计与调用
          为了完成某一个功能
       //定义一个类
       package xxx.xxx.xx
       import  xxx.xxx.xxx
       import xx.xxx.xxx
       public class XXX{
                  //方法
       }
       
       语法:
            修饰符  返回类型   方法名([参数列表])[可抛出的异常列表]{
                          //方法体
            }
       目前,我们学习的方法该如何定义:
              public [static] 返回类型  方法名([参数列表]){
                      //方法体
              }
          注意:用static修饰的方法叫做静态方法,没有用static修饰的方法叫做非静态方法
          普通修饰符:static(静态的)  final(最终的)  abstract(抽象的)
          访问修饰符:
                public  公开的,代表这个方法可以被所有的类来访问
                protected  受保护的
                default     不用写   默认的
                private     私有的
           注意点:修饰符之间是没有顺序的,也就是说  public static 或者static public

          返回类型:
                      1.void:就是表示返回类型是void,但是该方法没有返回值
                      2.基本类型或者是对象类型(包含内置对象/自定义对象)
            方法名:
             标识符:方法名  变量名  类名所取的名字
             标识符的命名规则
                        行业内必须要遵守的:
                         1.标识符由数字/字母/下划线/美元符号$组成的,但是不能由数字开头
                         2.不能是Java关键字/不能使以下3个字面量(null true false)+不能是Java的两个保留字(goto  const)
                         3.标识符没有长度限制
                         4.标识符大小写是敏感的
                         5.不推荐使用中文,会出现乱码问题
                         6.提倡见名知意


                        尽可能遵守的:
                        1.类名和接口的命名首字母要大写,以后每个单词首字母也要大写
                        2.方法名和变量名首字母要小写,以后每个单词的首字母要大写(驼峰)
                        3.包名一般是公司域名倒置+项目代号  全部是由小写并且以.隔开
                        4.常量命名一般是全部大写并且以_连接起来,也是提倡见名知意
参数列表:可有可无
           传给方法的"原料"

           实参:就是方法的调用者,传给方法的值,有实际的值
           形参:定义中方法中的变量(参数列表中的),没有实际的值
          
           局部变量:定义在方法内部的变量,生命周期只存在于方法中,即{}内
总结:
     方法调用:1.非静态方法可以调用所有方法
                    2. 静态方法中只可以直接调用静态方法(如果想调用非静态方法,
                                                  依然是要通过对象名.方法名来调用)
                    3.静态方法的调用可以直接通过类名.方法名
                    4.非静态方法的调用前必须要先创建对象,然后通过对象名.方法名

          总结:如果一个方法有返回类型,那么该方法中必有return
                  如果一个方法中有return,那么该方法返回类型不一定不是void

方法返回类型该如何选择:
                这个根据具体业务
                只要你能把自己说服就行

                如果说你这是为了输出或者处理某个事物,那么就就可以用void
                如果说你是为了得到某个值,而不关心这个值的后续处理,那么你就选择有返回类型的
-------------------------------------------------------------------------------------------------------------------------------------------------------
知识点5:
            条件判断
            语法:
            1.条件过滤
            if(条件){
                    //statement 1
            }

            2.分支的
            if(条件){
                    //statement 2
            }esle{
                  //statement 3
            }

            3.带多分支的
            if(条件){
                //......
                  if(...){
                        ....
                  }
            }else if(条件){
                  //....
            }else if(条件){
                  //.....
            }else{
                    ...............
            }
 注意点:1.if括号里面的条件最好要互斥
             2.else if语句可以有多个
             3.if else  语句可以嵌套使用
              4.条件可以是布尔类型或者是表达式   if(i>j){}
                            boolean flag  = true;
                            if(flag){
                                
                            }
----------------------------------------------------------------------------------------------
知识点6:switch   case
        语法1:
        switch中变量有6种,(String 类型是JDK7.0以后加入进去)
        可以是String byte short int char enum(枚举)
        面试题:经常会问switch括号中变量是否可以为long型?  不可以!!!
                switch(变量){
                    case 值1:
                                  //语句1
                                   break;//不能忘了
                     case 值2:
                                  //语句2
                                  break;
                       .........
                       ........
                       default:
                                break;
                }
--------------------------------------------------------------------------------------------------------
         语法2:
                   switch(变量){
                    case 值1:
                    case 值2:
                                  //语句2
                                  break;
                       case 值3:
                                break;......
                       default:
                           //....
                                break;
                }
注意:case 是可以合并起来一块写的!
运行原理:当switch括号中的变量等于case 后面的值的时候,就进入相应的case中执行
                当它遇到break的时候,就会跳出switch,否则程序会继续往下执行
                当没有哪个case后面的值跟switch括号中的变量相等,那么程序就会进入到
                default中去执行

                注意:default可以出现在任意一个位置

总结:switch  case能够完成的功能 if  else一定能够完成]
        也就是if   else   的业务拓展性更大一点
----------------------------------------------------------------------------------------------------
知识点7:三目运算
            (表达式)?expre1:expre2

            如果表达式是true的话就进入expre1 ,否则就进入expre2

            System.out.println(1>2?"真的":"假的");//假的
            
            (9%2==0)?"1":(1>2?"2":"1")-------->1
-------------------------------------------------------------------------------------------
知识点8:循环语句
              for循环
              while循环
              以上俩个叫做后置循环
              do while循环  叫做前置循环

1.for 循环
      语法:
                for(表达式1;表达式2;表达式3){
                        //循环体
                }
              表达式1:初始化语句,只执行一次;
              表达式2:循环条件,满足条件,进入(继续)循环,不满足的时候,循环终止
                            至少执行一次;
              表达式3:变量因子,记录每次循环变量的值前后的变化
                            可能执行,也有可能不执行

                简单形式:
                 for(int i=11;i<=10;i++){
                      System.out.println(i);
                 }

                 for循环的复合态
                 for(int i=0,j=1;i<=10 && j<=5;i+=2,j+=2){
                        System.out.printn(i+" "+j)
                 }

                 for循环括号中的三个表达式任意一个都是可以省略的
                for(int i=0;;i++){
                          ............
                }

                int i;
                for(i=10;i<10;){
                        ..........
                }

                //下面这种写法相当于while(true){}
                //死循环
                for(;;){
                      ..........
                }

for循环可以嵌套使用:
              外层循环和内层循环无关:
              外层循环走一次,内层循环运行全部
                      for(int i=0;i<=10;i++){
                            for(int j=0;j<=5;j++){
                                      .....
                            }
                      }

               外层循环和内层循环相关的
               内层循环的条件用到了外层循环的变量
                  for(int i=0;i<=10;i++){
                            for(int j=0;j<=i;j++){
                                      .....
                            }
                      }

面试题:
break和continue区别
        break    跳出循环,如果有多个循环嵌套,那么它只跳出自己所在的那一层循环
                     跳出switch

        continue:跳过本轮循环(continue后面的程序同样不执行),继续等待下一轮循环
                      一般是出现在循环体中


while循环

语法:while(条件){
        //循环体
}
条件同样可以是布尔类型或者是表示式

//死循环   千万不要忘记指定循环退出条件
while(true){
        if(条件){
              break;
        }
}
或者
boolean flag = true;
while(flag){
        if(条件){
              flag = false;
        } 
}
适用条件:当你不确定你要循环多少次的时候

do while循环    前置循环    先进入循环体,然后再判断循环条件
do{
  
}while(条件);



