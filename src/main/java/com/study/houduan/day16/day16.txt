提纲：注解
          Annotation简介
          JDK内置的Annotation
          Annotation的定义
          Annotation的使用
          Annotation的高级特性
---------------------------------------------------------------------------------------------------
为什么使用Annotation?
        在Java应用中,我们经常遇到模板代码.比如:我们编写一个
        Web Service 我们需要提供一个接口和实现作为模板,如果
        使用Annotation来修饰远程访问的代码,这些模板可以通过
        工具自动生成!

现在框架的使用:Hibernate  Spring......
好处:使用注解维护附属文件(配置文件)比较便利.并且不容易错误


Annotation的工作方式:
        它是JDK1.5以后的新特性,它允许开发者自己定义并且使用!

注意点:1.Annotation它本身是不会对程序的语义产生作用,它可以看作类似程序的工具或者类库
           ,它会反过来对正在运行的程序语义有所影响
            2.它可以从源文件,可以从CLASS文件获取,还可以从以运行时反射的多种方式进行获取


Annotation组成:
      1.一个定义Annotation类型的语法
      2.一个描述Annotation声明的语法
      3.调用Annotation的API
      4.一个使用@interface修饰的类-------->@interface是定义注解的关键字
      5.一组维护Annotation的工具
----------------------------------------------------------------------------------------------------------
JDK内置注解
          @override       代表方法重写
          @overload      代表方法重载
          @deprecated  代表已过时
          @SuppressWarnings   抑制警告
                        ---unused   定义了变量但是没有使用
                        ---rawtypes  抑制没有加入泛型的警告
                        ---serial        抑制没有添加序列号的警告
                        ---all             抑制所有的警告
                        ---unchecked
----------------------------------------------------------------------------------------------------------
自定义Annotation
          使用@interface来定义Annotation类型
          自动继承(隐式继承)  java.lang.annotation.Annotation接口
          由编译器完成细节

         注:在定义Annotation类型时,不能继承其他的Annotation型或者是接口

         语法:public @interface MyAnnotation{
                        //只有属性的概念,没有方法,默认的方法名是value
                        //还可以通过default给它一个默认值
                        String[] value();
         }
------------------------------------------------------------------------------------------------------------
Annotation的高级特性
          1.  java.lang.annotation.Target  类型
            指示注释类型所适用的程序元素的种类

            默认的代表注解使用在全局

            一般它是配合java.lang.annotation.ElementType里面的枚举值使用
            常用的枚举类型有:
                      TYPE:类/接口等
                      FIELD属性
                      METHOD:方法
                         .....等等

             2.java.lang.annotation.Retention   注解的保留策略
                配合java.lang.annotatin.RetentionPolicy 里面的枚举常量来使用
                        CLASS :可以从CLASS文件中获取注解信息
                        SOURCE:可以从源文件中获取注解信息
                        RUNTIME:可以反射读取注解信息
--------------------------------------------------------------------------------------------------
注解继承:子类可以继承父类加在类上面的注解,但是父类中方法上面的
                注解不能够被子类继承,因为父类的方法还是会被子类重写
-----------------------------------------------------------------------------------------------------






