
面向对象:
      OO(Object Oriented):面向对象
      OOAD(Object Oriented Analysis Design):面向对象分析设计
      OOP(Object Oriented Programming):面向对象编程

面向对象是一个思想,不是一门技术

C是面向过程:首先考虑的是算法和数据结构
面向对象:首先是找出对象,然后对对象进行分析,分析这个对象有
                哪些属性,哪些方法,其次再对对象进行抽象,并且找出对象与
                对象之间有什么关系,最后才是算法和数据结构!
---------------------------------------------------------------------------------------
Java是纯面向对象的语言,有如下特征:
1.封装
2.继承
3.多态
4.接口
5.抽象....
---------------------------------------------------------------------------------------
什么是类?
          类是一种抽象的概念,是对"对象"的抽象
          类就是将一组具有共性的对象进行抽象
什么是对象?
        对象就是类的实例,也就是类的具体的某个实例
类的定义:
            package xxx.xxx.xxx
            import xxx.xxxx.xxx
            public class Student{
                        //1.属性的定义
                        //2.构造方法
                        //3.getter   setter方法
                        //4.toString方法
            }
属性的定义:(Member Variable  成员变量)
      [修饰符] 数据类型 变量名 [=初始值]
修饰符：
                                           所有类        子类        同包       本身
        public       公开的           yes              yes         yes          yes       
        protected  受保护的       no                yes         yes         yes
        []              默认的           no               no             yes        yes
        private      私有的          no               no            no          yes

注意点:一般常量的定义都是public
----------------------------------------------------------------------
构造方法:
          也叫做构造器,是用来给属性进行赋值的
         构造方法语法:
                  无参构造:
                  修饰符 类名(){
                  
                  }
                  public Student(){
                        
                  }

                  有参构造
                  public Student(int sid,String sname){
                            id = sid;
                            name = sname;
                  }
构造方法  注意点:
                1.构造方法没有返回类型
                2.构造方法的名称要和类名一致
                3.如果一个实体类中没有提供任何构造,那么系统会自动分配一个
                  空参构造
                4.如果实体类中已经存在了一个有参构造,那么我们必须要提供一个空参构造(前提是用到它的空参)
-----------------------------------------------------------------------------------------------------------------------------------------------------
setter/getter方法    可以通过工具自动生成
          用来设置/获取 属性值
        
        getter方法的方法名　　get+属性名的首字母大写
        setter方法的方法名　　set+属性名的首字母大写

 set方法可以用来进行赋值
              可以进行参数有效性判断

如果要使构造方法也能实现参数有效性判断,我们可以在构造方法中调用set方法


它和构造方法的赋值有什么区别呢?
      构造方法的赋值只能进行一次,并且是在创建对象的时候进行的
      set方法可以多次赋值

      构造方法的赋值方式比较简单点


-----------------------------------------------------------------------------------------------
this关键字
两个作用:1.代表当前的对象
                    主要是用来:构造方法和set方法的参数列表中的变量名和实体类中的
                                      成员变量名是一样的时候,用this来加以区分
               2.可以在实体类中的某个构造中调用另一个已经存在的某个构造.
                    注意点:要放在第一行!
-------------------------------------------------------------------------------------------------
总结一个:
        类和对象之间的关系?
            类是对象的抽象化,对象是类的一个具体的实例!!!
-------------------------------------------------------------------------------------
类:
      成员变量
      空参
      有参
      getter/setter
      toString();
-----------------------------
方法的重载 @overload

特征:1.方法名必须一样
         2.方法的返回类型可能不一样
         3.方法的参数列表必须不一样
                a.参数列表的个数不一样
                b.参数列表的类型不一样
                c.参数列表的顺序不一样
                       I   数据类型一样,顺序不一样
                       II  数据类型不一样,顺序不一样
         4.构造方法允许重载
前提:这些方法要出现在同一类当中
API中方法的重载可以给编程带来便利...
-----------------------------------------------------------
JVM内存结构
          1.栈区     类似弹夹
                  大小是固定的  效率高 先进后出 不能动态分配
                
          2.堆区
                大小是不固定的  效率低 先进先出   能够动态分配
                
                一般我们都是用new关键字在堆空间中申请一块区域
              Scanner sc = new Scanner(System.in);
              通过new关键字在堆空间当中为Scanner这个对象申请了一块空间
              同时,sc代表一个引用,将指向这块堆空间的地址赋值给引用sc

          3.代码区
                字节码文件  代码块  静态常量
      总结:引用和对象之间的关系?
             引用保存的是指向堆空间中对象的地址!
面试题:
          1.String s = new String("xyz");
          请问创建了几个对象?
          如果说题目强调串池是空的,那么就创建了2个对象
          分别是new String()   和xyz

          2.String s = "a"+"b"+"c";创建了几个对象   
             a b c   ab abc  5个对象
------------------------------------------------------------------------------------------
Student s1;//此处只是声明了一个s1变量
s1 = new Student();//在堆空间中申请了第一个Student对象,并且将该对象的内存地址赋值给s1
Student s2 = new Student();//在堆空间中申请了第二个Student对象,并且将该对象的内存地址赋值给s2
s1  = s2;//将引用s2赋值给s1
//s1指向的是谁?    s1指向的是第二个Student对象
//此时第一个Student对象就成了垃圾对象,没有任何引用指向的对象

GC()    垃圾回收机制
            回收的就是没有任何引用指向的对象

            JVM启动的时候,开启了2个线程:
            main:程序主入口
            gc:守护线程  用来进行垃圾对象的回收

1.什么时候JVM会去处理回收垃圾呢?
      注意:JVM有自己的算法(比如引用计数器,对象遍历等)

      程序员也可以通过编码的方式来尽最大可能去提醒JVM来回收垃圾对象
      也就是说,JVM不一定立即去执行
      1.System.gc();
      2.Runtime.getRunTime().gc();//底层仍然调用的是System.gc();