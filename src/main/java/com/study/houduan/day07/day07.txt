提纲:1.回顾多态
        2.面向父类编程应用
        3.简单工厂模式
        4.static关键字极其应用
        5.类加载进JVM活动过程
        6.单例模式
        7.Final关键字
----------------------------------------------------------------------------------
多态:
        编译时类型:可以看成是声明对象时的数据类型,在编译时有效
        运行时类型:可以看成是new运算符后的类型

  多态的理解:
        编译时类型决定了对象可以访问到的非私有成员
        运行时类型决定了该对象真正的行为能力
   

   多态的应用----->面向父类编程
                            1.编译时类型要写成父类
                            2.方法的参数类型要写成父类
                            3.方法的返回类型要写成父类
----------------------------------------------------------------------------------
案例:ShapeBiz   给方法中传入指定参数,输出它的周长和面积
                        public void area(Circle circle){
                                System.out.println(circle.area());
                        }
        
                       public void area(Rect rect){
                                System.out.println(rect.area());
                        }          
                      .............
改成写:只要传入一个参数,就可以打印出所有图形的面积和周长
                public void area(Shape s){
                                System.out.println(s.area());
                        }

//测试
Shape s = new Circle(4.0);
ShapeBiz biz = new ShapeBiz();
biz.area(s);
-----------------------------------------------------------------------------------------------
面向父类编程之   方法的返回类型要写成父类
简单工厂模式
设计一个案例:传入一个指定参数,返回某一个类的具体的实例
                      
                      public static Circle getInstance(int type){
                              return new Cicle();
                      }
                      
                      Circle circle = new Circle();
                      Circle circle = Circle.getInstance(1);

                      之前学过的Calendar cal = Calendar.getInstance();
                      就是运用了简单工厂模式


                      private static  final int CIRCLE = 0;
                      private static  final int RECT = 1;
                      private static  final int SQUARE= 2;

                      //方法的返回类型写成父类
                    public static Shape getInstance(int type){
                            Shape s = null;
                            if(type==CIRCLE){
                                    s = new Circle();
                            }else if(type==RECT){
                                  s = new Rect();
                            }
                                .....
                               return s;
                    }
-----------------------------------------------------------------------------------------------
static 关键字
        属性:静态属性,也叫作类变量,是所有对象所共享的,
                它是类所拥有的!

              语法:public static int id;
         
         静态属性初始化的时机:
                当类加载的时候,就会给静态属性分配空间,并且进行初始化;
                而普通属性,是创建对象的时候,才会给它分配空间并且进行初始化.
         
         方法:静态方法

         特点:a.静态方法中可以直接调用静态成员,如果要调用非静态成员,需要先创建对象
                 b.静态方法可以直接通过类名.方法名来调用,非静态成员需通过对象.方法名
                 c.非静态方法可以调用任何成员(包括静态和非静态成员)

问题1:为什么静态方法中不能够直接调用非静态方法?
          答:因为静态方法是在类加载的时候就出现了,而此时对象还不存在,
              但是非静态成员是对象所拥有的,对象都不存在,自然就不能调用!

问题2:为什么main是静态的呢?
          答:main是程序的主入口,它是由JVM来调用的,但是此时还没有对象
               根据JVM规范,我们将它定义成静态的.

问题3:为什么不是所有的方法都定义成静态的?
          答:因为静态成员是类加载的时候就出现了.如果说静态成员比较多的话
              会消耗资源,效率低下,并且有很多东西用的次数并不多!

通常情况下:工具类当中的方法一般都是静态的,方便使用!

static应用之  产生自增唯一的id
------------------------------------------------------------------------------------
代码块:
        普通代码块
        {
              
        }
        静态代码块
        static{
            
        }
注意:
       1.静态代码块是类加载的时候就执行,并且只执行1次
       2.普通代码块是每次创建对象的时候优先执行,一般我们选择
          不写普通代码块,它被移植到构造方法中.
类加载进JVM的活动过程
        1.JVM将类加载到内存
        2.给这个类中的所有静态成员分配空间
        3.给这些静态成员初始化
        4.调用静态代码块
        5.如果创建了对象,则
                5-1 给所有的非静态成员分配空间
                5-2 初始化非静态成员
                5-3 调用普通代码块(一般都是移植到构造方法中)
                5-4 调用构造方法

静态代码块应用:用来处理一些费时费力,并且只需要执行一次的程序
------------------------------------------------------------------------------------------
static应用之二  单例模式的设计
要求:在应用程序当中,某个类的实例有且只有1个
解决方案:
        1.提供一个类的唯一实例作为这个类的静态属性
          private static Singleton singleton = new Singleton();
         2.私有化构造方法    目的是为了让外界不能new
           private Singleton(){
                    
           }
        3.提供一个静态的公开的方法来返回这个类的实例
          public static Singleton getInstance(){
                  return singleton;
          }
-----------------------------------------------------------------------------------------
Final 关键字
          1.局部变量
                    特点:1.在使用之前,必须要初始化
                            2.一旦赋值,不能改变
                            3.比字面量携带更多的信息
          2.属性
                    特点:1.在声明的时候必须进行赋值
                            2.可以通过静态代码块进行赋值
          3.方法
                  特点:final修饰的方法不能够被重写
          4.类
                  特点:final修饰的类不能够被继承







  







